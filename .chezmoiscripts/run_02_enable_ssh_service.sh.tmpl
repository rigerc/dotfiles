#!{{ lookPath "bash" }}
set -uo pipefail

# Source shared utilities
if [[ -z "${CHEZMOI_WORKING_TREE}" ]]; then
    echo "Error, \$CHEZMOI_WORKING_TREE must be set. Please only run this script via chezmoi"
    exit 1
fi
source "${CHEZMOI_WORKING_TREE}/utils/common.sh"

# Configuration
readonly SSH_PORT="4444"
readonly SSHD_CONFIG="/etc/ssh/sshd_config"
readonly TMP_DIR="$HOME/.tmp"

# Check if systemd is available
has_systemd() {
    command_exists systemctl && [[ -d /run/systemd/system ]]
}

# Backup file with timestamp
backup_file() {
    local file="$1"
    local filename=$(basename "$file")
    local backup="$TMP_DIR/${filename}.backup.$(date +%Y%m%d_%H%M%S)"
    
    # Create $TMP_DIR if it doesn't exist
    if [[ ! -d "$TMP_DIR" ]]; then
        mkdir -p "$TMP_DIR"
        log_info "Created temporary directory: $TMP_DIR"
    fi
    
    if [[ -f "$file" ]]; then
        cp "$file" "$backup"
        log_info "Backup created: $backup"
        echo "$backup"
    fi
}

# Validate SSH configuration
validate_sshd_config() {
    if ! command_exists sshd; then
        log_error "sshd not found"
        return 1
    fi
    
    sudo sshd -t 2>&1
}

# Check if SSH is listening on port
check_ssh_port() {
    local port="$1"
    local max_attempts=10
    local attempt=0
    
    # Validate port number
    if [[ ! "$port" =~ ^[0-9]+$ ]] || [[ "$port" -lt 1 ]] || [[ "$port" -gt 65535 ]]; then
        log_error "Invalid port number: $port"
        return 1
    fi
    
    # Check if we have the required tools
    if ! command_exists ss && ! command_exists netstat; then
        log_warning "Neither ss nor netstat available, cannot verify port"
        return 0  # Assume success
    fi
    
    log_info "Checking if SSH is listening on port $port..."
    
    while [[ $attempt -lt $max_attempts ]]; do
        local found=0
        
        if command_exists ss; then
            # More precise pattern matching
            if ss -tlnp 2>&1 | grep -E "LISTEN.*:${port}\s+" >/dev/null; then
                found=1
            else
                # Debug: show what we found (optional, remove in production)
                log_info "Attempt $((attempt + 1))/$max_attempts - Not found yet"
                # Uncomment to see actual ss output:
                # ss -tlnp 2>&1 | grep ":${port}" || true
            fi
        elif command_exists netstat; then
            # More precise pattern matching
            if netstat -tlnp 2>&1 | grep -E "LISTEN.*:${port}\s+" >/dev/null; then
                found=1
            else
                log_info "Attempt $((attempt + 1))/$max_attempts - Not found yet"
            fi
        fi
        
        if [[ $found -eq 1 ]]; then
            log_info "SSH is listening on port $port"
            return 0
        fi
        
        sleep 1
        ((attempt++))
    done
    
    log_error "SSH failed to listen on port $port after $max_attempts attempts"
    
    # Final diagnostic check
    if command_exists ss; then
        log_error "Current listening ports:"
        ss -tlnp 2>&1 | grep LISTEN || log_error "No listening ports found"
    fi
    
    return 1
}

create_sshd_config() {
    log_info "Creating SSH configuration..."
    
    sudo tee "$SSHD_CONFIG" > /dev/null << 'SSHD_EOF'
# SSH Daemon Configuration
# Port configuration
Port 4444
ListenAddress 0.0.0.0

# Protocol
Protocol 2

# Host keys
HostKey /etc/ssh/ssh_host_rsa_key
HostKey /etc/ssh/ssh_host_ecdsa_key
HostKey /etc/ssh/ssh_host_ed25519_key

# Logging
SyslogFacility AUTH
LogLevel INFO

# Authentication settings
LoginGraceTime 120
PermitRootLogin no
StrictModes yes

# Public key authentication (disabled)
PubkeyAuthentication yes

# Password authentication (enabled)
PasswordAuthentication no
PermitEmptyPasswords no

# Challenge response authentication
ChallengeResponseAuthentication no

# Use PAM authentication
UsePAM yes

# Allow all users
AllowUsers *

# Connection settings
ClientAliveInterval 300
ClientAliveCountMax 2
MaxAuthTries 6
MaxSessions 10

# Security settings
X11Forwarding no
PrintMotd no
TCPKeepAlive yes

# Subsystem configuration
Subsystem sftp internal-sftp
SSHD_EOF
    
    sudo chmod 644 "$SSHD_CONFIG"
    log_success "SSH configuration created"
}

configure_sshd() {
    log_header "Configuring SSH Service"

    # Check for systemd
    if ! has_systemd; then
        log_error "systemd not available - cannot manage SSH service"
        return 1
    fi

    # Check if SSH is already running on configured port
    log_info "Checking if SSH is already running on port $SSH_PORT..."
    if check_ssh_port "$SSH_PORT"; then
        log_success "SSH is already running on port $SSH_PORT"
        log_header "SSH Service Configuration Completed"
        echo ""
        sudo systemctl status sshd --no-pager --lines=3
        return 1
    fi

    # Backup existing configuration
    if [[ -f "$SSHD_CONFIG" ]]; then
        backup_file "$SSHD_CONFIG"
    fi
    
    # Create SSH configuration
    create_sshd_config
    
    # Generate host keys
    log_info "Generating SSH host keys..."
    if sudo ssh-keygen -A 2>/dev/null; then
        log_success "SSH host keys generated"
    else
        log_warning "SSH host key generation had issues (may already exist)"
    fi
    
    # Validate configuration
    log_info "Validating SSH configuration..."
    if ! validate_sshd_config; then
        log_error "SSH configuration is invalid"
        sudo sshd -t
        return 1
    fi
    log_success "SSH configuration is valid"
    
    # Enable SSH service
    log_info "Enabling SSH service to start on boot..."
    if sudo systemctl enable sshd 2>/dev/null; then
        log_success "SSH service enabled"
    else
        log_warning "Could not enable SSH service"
    fi
    
    # Start SSH service
    log_info "Starting SSH service..."
    if sudo systemctl restart sshd; then
        log_success "SSH service started"
    else
        log_error "Failed to start SSH service"
        sudo systemctl status sshd --no-pager
        return 1
    fi
    
    # Verify service is running
    if ! sudo systemctl is-active --quiet sshd; then
        log_error "SSH service is not running"
        sudo systemctl status sshd --no-pager
        return 1
    fi
    log_success "SSH service is running"
    
    # Check port
    log_info "Verifying SSH is listening on port $SSH_PORT..."
    if check_ssh_port "$SSH_PORT"; then
        log_success "SSH is listening on port $SSH_PORT"
    else
        log_warning "Cannot verify SSH is listening on port $SSH_PORT"
        log_info "Checking all SSH ports..."
        if command_exists ss; then
            sudo ss -tlnp | grep sshd || true
        elif command_exists netstat; then
            sudo netstat -tlnp | grep sshd || true
        fi
    fi
    
    log_header "SSH Service Configuration Completed"
    echo ""
    sudo systemctl status sshd --no-pager --lines=3
}

# Copy SSH public key to remote WSL instance via Samba
generate_ssh_key() {
    local ssh_key="${HOME}/.ssh/id_ed25519"  # Private key (no .pub)
    local ssh_pub_key="${ssh_key}.pub"
    log_header "Generating SSH key"
    
    # Generate SSH key if it doesn't exist
    if [[ ! -f "$ssh_pub_key" ]]; then
        log_info "SSH public key not found, generating new key..."
        
        # Create .ssh directory if needed
        mkdir -p "${HOME}/.ssh"
        chmod 700 "${HOME}/.ssh"
        
        # Generate ed25519 key without passphrase
        if ssh-keygen -t ed25519 -f "$ssh_key" -N "" -C "$(whoami)@$(hostname)" >dev/null; then
            log_success "SSH key generated: $ssh_key"
        else
            log_error "Failed to generate SSH key"
            return 1
        fi
    else
        log_success "Found SSH public key: $ssh_pub_key"
    fi
    
    # Read the public key content
    local pub_key_content
    pub_key_content=$(cat "$ssh_pub_key")
    
    log_info "Public key:"
    echo "$pub_key_content"
}

main() {
    if is_arch; then
        configure_sshd
    elif is_android; then
        generate_ssh_key
    fi
}
main "$@"