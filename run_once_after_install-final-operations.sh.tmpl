#!/bin/bash
set -euo pipefail

# Constants
readonly TMUX_PLUGIN_PATH="$HOME/.config/tmux/plugins/tpm/bin/install_plugins"
readonly ALACRITTY_SOURCE_PATH="$HOME/.config/alacritty/alacritty.toml"
readonly ALACRITTY_TARGET_PATH="/mnt/c/Users/bondg/appdata/roaming/alacritty/alacritty.toml"
readonly ALACRITTY_THEMES_SOURCE_PATH="$HOME/.config/alacritty/themes"
readonly ALACRITTY_THEMES_TARGET_PATH="/mnt/c/Users/bondg/appdata/roaming/alacritty/themes"

# Colors for output
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[1;33m'
readonly NC='\033[0m' # No Color

# Setup environment
setup_environment() {
    source "$HOME/.bashrc"
    test -d ~/.linuxbrew && eval "$(~/.linuxbrew/bin/brew shellenv)"
    test -d /home/linuxbrew/.linuxbrew && eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"

    echo -e "${YELLOW}Finishing up installation and setting up Zsh...${NC}"
    echo -e "${YELLOW}Running as user: $(whoami)${NC}"
}

# Cleanup function on error
cleanup_on_error() {
    echo -e "${RED}Script failed. Some operations may not have completed successfully.${NC}"
}

# Set trap for cleanup on error
trap cleanup_on_error ERR

# Setup Zsh as default shell
setup_zsh_shell() {
    local zsh_path
    zsh_path=$(which zsh 2>/dev/null) || {
        echo -e "${RED}✗ Zsh not found in PATH${NC}"
        return 1
    }

    # Add to /etc/shells if not present
    if ! grep -q "^${zsh_path}$" /etc/shells 2>/dev/null; then
        echo "Adding Zsh to /etc/shells..."
        if ! echo "$zsh_path" | sudo tee -a /etc/shells >/dev/null; then
            echo -e "${RED}✗ Failed to add Zsh to /etc/shells${NC}"
            return 1
        fi
        echo -e "${GREEN}✓ Zsh added to /etc/shells${NC}"
    else
        echo -e "${GREEN}✓ Zsh already in /etc/shells${NC}"
    fi

    # Set as default shell if not already
    if [[ "$SHELL" != "$zsh_path" ]]; then
        echo "Setting Zsh as default shell..."
        if ! sudo chsh -s "$zsh_path" "$(whoami)"; then
            echo -e "${RED}✗ Failed to set Zsh as default shell${NC}"
            return 1
        fi
        echo -e "${GREEN}✓ Zsh set as default shell${NC}"
    else
        echo -e "${GREEN}✓ Zsh already set as default shell${NC}"
    fi

    return 0
}

# Clean up LazyVim git repository
cleanup_lazyvim() {
    if [[ -d "$HOME/.config/nvim/.git" ]]; then
        echo "Cleaning up LazyVim git repository..."
        rm -rf "$HOME/.config/nvim/.git"
        echo -e "${GREEN}✓ LazyVim cleanup completed${NC}"
    else
        echo -e "${GREEN}✓ LazyVim already clean (no .git directory found)${NC}"
    fi
    return 0
}

# Rebuild font cache
rebuild_font_cache() {
    if ! command -v fc-cache &> /dev/null; then
        echo -e "${YELLOW}⚠ fc-cache not found, skipping font cache rebuild${NC}"
        return 0
    fi
    
    echo "Rebuilding font cache..."
    if fc-cache -f -v > /dev/null 2>&1; then
        echo -e "${GREEN}✓ Font cache rebuilt successfully${NC}"
        return 0
    else
        echo -e "${RED}✗ Failed to rebuild font cache${NC}"
        return 1
    fi
}

# Generate system locales
generate_locales() {
    if ! command -v locale-gen &> /dev/null; then
        echo -e "${YELLOW}⚠ locale-gen not found, skipping locale generation${NC}"
        return 0
    fi
    sudo sed -i 's:#en_US.UTF-8 UTF-8:en_US.UTF-8 UTF-8:g' /etc/locale.gen
    echo "Generating system locales..."
    if sudo locale-gen > /dev/null 2>&1; then
        echo -e "${GREEN}✓ Locales generated successfully${NC}"
        return 0
    else
        echo -e "${RED}✗ Failed to generate locales${NC}"
        return 1
    fi
}

# Install Tmux plugins
install_tmux_plugins() {
    if [[ ! -x "$TMUX_PLUGIN_PATH" ]]; then
        echo -e "${YELLOW}⚠ Tmux plugin manager not found at $TMUX_PLUGIN_PATH, skipping${NC}"
        return 0
    fi
    
    echo "Installing Tmux plugins..."
    if "$TMUX_PLUGIN_PATH" > /dev/null 2>&1; then
        echo -e "${GREEN}✓ Tmux plugins installed successfully${NC}"
        return 0
    else
        echo -e "${RED}✗ Failed to install Tmux plugins${NC}"
        return 1
    fi
}



# Copy Alacritty configuration to Windows
copy_alacritty_config() {
    local config_copied=false
    
    # Copy alacritty.toml file
    if [[ ! -f "$ALACRITTY_SOURCE_PATH" ]]; then
        echo -e "${YELLOW}⚠ No alacritty.toml found at $ALACRITTY_SOURCE_PATH, skipping config copy${NC}"
    else
        # Create target directory if it doesn't exist
        local target_dir
        target_dir=$(dirname "$ALACRITTY_TARGET_PATH")
        if [[ ! -d "$target_dir" ]]; then
            echo "Creating target directory: $target_dir"
            if ! mkdir -p "$target_dir"; then
                echo -e "${RED}✗ Failed to create target directory: $target_dir${NC}"
                return 1
            fi
            echo -e "${GREEN}✓ Target directory created: $target_dir${NC}"
        fi

        echo "Copying alacritty.toml to Windows..."
        if ! cp "$ALACRITTY_SOURCE_PATH" "$ALACRITTY_TARGET_PATH"; then
            echo -e "${RED}✗ Failed to copy alacritty.toml to $ALACRITTY_TARGET_PATH${NC}"
            return 1
        fi

        # Verify the copy was successful
        if [[ -f "$ALACRITTY_TARGET_PATH" ]]; then
            echo -e "${GREEN}✓ alacritty.toml successfully copied to $ALACRITTY_TARGET_PATH${NC}"
            config_copied=true
        else
            echo -e "${RED}✗ Verification failed: $ALACRITTY_TARGET_PATH not found after copy${NC}"
            return 1
        fi
    fi

    # Copy themes folder
    if [[ ! -d "$ALACRITTY_THEMES_SOURCE_PATH" ]]; then
        echo -e "${YELLOW}⚠ No themes folder found at $ALACRITTY_THEMES_SOURCE_PATH, skipping themes copy${NC}"
        if [[ "$config_copied" == true ]]; then
            return 0
        else
            return 0
        fi
    fi

    # Create parent directory for themes
    local themes_parent
    themes_parent=$(dirname "$ALACRITTY_THEMES_TARGET_PATH")
    if [[ ! -d "$themes_parent" ]]; then
        echo "Creating themes parent directory: $themes_parent"
        if ! mkdir -p "$themes_parent"; then
            echo -e "${RED}✗ Failed to create themes parent directory${NC}"
            return 1
        fi
    fi

    echo "Copying Alacritty themes folder to Windows..."
    # Remove existing themes directory if it exists to ensure clean copy
    if [[ -d "$ALACRITTY_THEMES_TARGET_PATH" ]]; then
        rm -rf "$ALACRITTY_THEMES_TARGET_PATH"
    fi
    
    if ! cp -r "$ALACRITTY_THEMES_SOURCE_PATH" "$ALACRITTY_THEMES_TARGET_PATH"; then
        echo -e "${RED}✗ Failed to copy themes folder to $ALACRITTY_THEMES_TARGET_PATH${NC}"
        return 1
    fi

    # Verify the copy was successful
    if [[ -d "$ALACRITTY_THEMES_TARGET_PATH" ]]; then
        echo -e "${GREEN}✓ Themes folder successfully copied to $ALACRITTY_THEMES_TARGET_PATH${NC}"
        return 0
    else
        echo -e "${RED}✗ Verification failed: $ALACRITTY_THEMES_TARGET_PATH not found after copy${NC}"
        return 1
    fi
}

# Print final status
print_status() {
    local all_success="$1"
    echo ""
    if [[ "$all_success" == true ]]; then
        echo -e "${GREEN}═══════════════════════════════════════════════════${NC}"
        echo -e "${GREEN}All operations completed successfully!${NC}"
        echo -e "${GREEN}═══════════════════════════════════════════════════${NC}"
    else
        echo -e "${YELLOW}═══════════════════════════════════════════════════${NC}"
        echo -e "${YELLOW}Some operations failed. Please review the output above.${NC}"
        echo -e "${YELLOW}═══════════════════════════════════════════════════${NC}"
    fi
}

# Main execution function
main() {
    local all_success=true
    local operation_status

    # Setup environment
    setup_environment

    # Define operations to run in order
    declare -a operations=(
        "setup_zsh_shell"
        "cleanup_lazyvim"
        "rebuild_font_cache"
        "generate_locales"
        "install_tmux_plugins"
        "copy_alacritty_config"
    )

    # Execute all operations
    for operation in "${operations[@]}"; do
        echo ""
        echo -e "${YELLOW}───────────────────────────────────────────────────${NC}"
        if $operation; then
            operation_status="${GREEN}✓ Success${NC}"
        else
            all_success=false
            operation_status="${RED}✗ Failed${NC}"
        fi
        echo -e "Status: $operation_status"
    done

    # Print final status
    print_status "$all_success"

    # Exit with appropriate code
    if [[ "$all_success" == true ]]; then
        echo ""
        echo -e "${RED}Please restart your shell to apply all changes!${NC}"
        sleep 5
        exit 0
    else
        exit 1
    fi
}

# Execute main function
main "$@"