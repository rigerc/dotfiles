#!/bin/bash
set -euo pipefail

# Constants
readonly TMUX_PLUGIN_PATH="$HOME/.config/tmux/plugins/tpm/bin/install_plugins"
readonly WSL_SOURCE_PATH="$HOME/tmp/wsl.conf"
readonly WSL_TARGET_PATH="/etc/wsl.conf"
readonly TEMP_DIR="$HOME/tmp"
readonly SCRIPT_TIMEOUT=30

# Colors for output
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[1;33m'
readonly NC='\033[0m' # No Color

# Setup environment
setup_environment() {
    source "$HOME/.bashrc"
    test -d ~/.linuxbrew && eval "$(~/.linuxbrew/bin/brew shellenv)"
    test -d /home/linuxbrew/.linuxbrew && eval "$( /home/linuxbrew/.linuxbrew/bin/brew shellenv)"

    echo -e "${YELLOW}Finishing up installation and setting up Zsh...${NC}"
    echo -e "${YELLOW}Running as user: $(whoami)${NC}"
}

# Cleanup function on error
cleanup_on_error() {
    echo -e "${RED}Script failed. Some operations may not have completed successfully.${NC}"
}

# Set trap for cleanup on error
trap cleanup_on_error ERR

# Improved run command function with timeout and better error handling
run_command() {
    local description="$1"
    local command="$2"
    local timeout="${3:-$SCRIPT_TIMEOUT}"

    echo -e "${YELLOW}${description}${NC}"

    # Run with timeout and capture both stdout and stderr
    if timeout "$timeout" bash -c "$command" 2>&1; then
        echo -e "${GREEN}✓ ${description} completed successfully${NC}"
        return 0
    else
        local exit_code=$?
        echo -e "${RED}✗ ${description} failed (exit code: $exit_code)${NC}"
        return $exit_code
    fi
}

# Setup Zsh as default shell
setup_zsh_shell() {
    local zsh_path
    zsh_path=$(which zsh) || {
        echo "✗ Zsh not found in PATH"
        return 1
    }

    # Add to /etc/shells if not present
    if ! grep -q "^${zsh_path}$" /etc/shells 2>/dev/null; then
        echo "Adding Zsh to /etc/shells..."
        if ! echo "$zsh_path" | sudo tee -a /etc/shells >/dev/null; then
            echo "✗ Failed to add Zsh to /etc/shells"
            return 1
        fi
        echo "✓ Zsh added to /etc/shells"
    else
        echo "✓ Zsh already in /etc/shells"
    fi

    # Set as default shell if not already
    if [[ "$SHELL" != "$zsh_path" ]]; then
        echo "Setting Zsh as default shell..."
        if ! sudo chsh -s "$zsh_path" "$(whoami)"; then
            echo "✗ Failed to set Zsh as default shell"
            return 1
        fi
        echo "✓ Zsh set as default shell"
    else
        echo "✓ Zsh already set as default shell"
    fi

    return 0
}

# Clean up LazyVim git repository
cleanup_lazyvim() {
    if [[ -d "$HOME/.config/nvim/.git" ]]; then
        echo "Cleaning up LazyVim git repository..."
        rm -rf "$HOME/.config/nvim/.git"
        echo "✓ LazyVim cleanup completed"
    else
        echo "✓ LazyVim already clean (no .git directory found)"
    fi
    return 0
}

# Rebuild font cache
rebuild_font_cache() {
    echo "Rebuilding font cache..."
    fc-cache -f -v
    return 0
}

# Generate system locales
generate_locales() {
    echo "Generating system locales..."
    locale-gen
    return 0
}

# Install Tmux plugins
install_tmux_plugins() {
    if [[ -x "$TMUX_PLUGIN_PATH" ]]; then
        echo "Installing Tmux plugins..."
        "$TMUX_PLUGIN_PATH"
        return 0
    else
        echo "✗ Tmux plugin manager not found at $TMUX_PLUGIN_PATH"
        return 1
    fi
}

# Move WSL configuration and cleanup temp directory
move_wsl_config() {
    if [[ ! -f "$WSL_SOURCE_PATH" ]]; then
        echo "No wsl.conf found in $TEMP_DIR, skipping WSL configuration"
        return 0
    fi

    echo "Moving wsl.conf to $WSL_TARGET_PATH..."
    if ! sudo mv "$WSL_SOURCE_PATH" "$WSL_TARGET_PATH"; then
        echo "✗ Failed to move wsl.conf to $WSL_TARGET_PATH"
        return 1
    fi

    # Verify the move was successful
    if [[ -f "$WSL_TARGET_PATH" ]]; then
        echo "✓ wsl.conf successfully moved to $WSL_TARGET_PATH"

        # Clean up temp directory if it's empty or contains only the wsl.conf
        if [[ -d "$TEMP_DIR" ]]; then
            local remaining_files
            remaining_files=$(find "$TEMP_DIR" -mindepth 1 -maxdepth 1 2>/dev/null | wc -l)
            if [[ "$remaining_files" -eq 0 ]]; then
                echo "Removing $TEMP_DIR directory (empty)..."
                rm -rf "$TEMP_DIR"
                echo "✓ $TEMP_DIR directory removed"
            else
                echo "✓ $TEMP_DIR directory retained (contains other files)"
            fi
        fi
        return 0
    else
        echo "✗ Verification failed: $WSL_TARGET_PATH not found after move"
        return 1
    fi
}

# Get description for operation
get_description() {
    local operation="$1"
    case "$operation" in
        "setup_zsh_shell") echo "Setting up Zsh as default shell..." ;;
        "cleanup_lazyvim") echo "Cleaning up LazyVim..." ;;
        "rebuild_font_cache") echo "Rebuilding font cache..." ;;
        "generate_locales") echo "Generating locales..." ;;
        "install_tmux_plugins") echo "Installing Tmux plugins..." ;;
        "move_wsl_config") echo "Moving WSL configuration and cleaning up..." ;;
        *) echo "Running $operation..." ;;
    esac
}

# Print final status
print_status() {
    local all_success="$1"
    echo ""
    if [[ "$all_success" == true ]]; then
        echo -e "${GREEN}All operations completed successfully!${NC}"
    else
        echo -e "${YELLOW}Some operations failed. Please review the output above.${NC}"
    fi
}

# Main execution function
main() {
    local all_success=true

    # Setup environment
    setup_environment

    # Define operations to run in order
    local operations=(
        "setup_zsh_shell"
        "cleanup_lazyvim"
        "rebuild_font_cache"
        "generate_locales"
        "install_tmux_plugins"
    )

    # Execute all operations
    for operation in "${operations[@]}"; do
        if ! run_command "$(get_description "$operation")" "$operation"; then
            all_success=false
        fi
    done

    # Print final status
    print_status "$all_success"

    # Exit with appropriate code
    if [[ "$all_success" == true ]]; then
        echo -e "${RED}Restart shell to finish...${NC}"
        sleep 10
        exit 0
    else
        exit 1
    fi
}

# Execute main function
main "$@"